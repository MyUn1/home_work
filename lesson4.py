# Задание № 1.
# Реализовать скрипт, в котором должна быть предусмотрена функция расчета
# заработной платы сотрудника. В расчете необходимо использовать формулу:
# (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

# !!! В этом задании PyCharm выдает ошибку при вводе параметров через терминал - якобы питон не найдет.
# Переустановка не помогла.
# Поэтому все параметры введены через 'Edit configurations...'

# from sys import argv
#
# name, output_per_hour, rate_per_hour, premium = argv
#
# wage = (int(output_per_hour) * int(rate_per_hour)) + int(premium)
# print(f"Заработная плата сотрудника равна:  {wage}")

# Задание 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

# my_list = [30, 40, 5, 1, 2, 9, 52, 11,48]
# my_new_list = [el for num, el in enumerate(my_list) if my_list[num - 1] < my_list[num]]
# print(f'Исходный список: {my_list}')
# print(f'Результат: {my_new_list}')

# Задание 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор

# my_list = [el for el in range(20,240) if el % 20 == 0 or el % 21 == 0 ]
# print(my_list)
#
# # Если совсем в одну строчку:
# print(f'Числа кратные 20 и 21 в диапозоне от 20 до 240: {[el for el in range(20,240) if el % 20 == 0 or el % 21 == 0]}')

# Задание 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

# my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# my_new_list = [el for el in my_list if my_list.count(el) == 1]
# print(my_new_list)

# Задание 5. Реализовать формирование списка, используя функцию range()
# и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce()

# from functools import reduce
#
# def my_func(start, stop):
#     return start * stop
#
# print(f'Список четных чисел: {[el for el in range(100, 1000) if el % 2 == 0]}')
# print(f'Результат произведения всех элементов списка: '
#       f'{reduce(my_func, [el for el in range(100, 1000) if el % 2 == 0])}')

# Задание 6.  Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3,
# а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

# from itertools import count
# from itertools import cycle
#
# def my_count_func(start_number, stop_number):
#     for el in count(start_number):
#         if el > stop_number:
#             break
#         else:
#             print(el)
# def my_cycle_func(my_list, iteration):
#     i = 0
#     iter = cycle(my_list)
#     while i < iteration:
#         print(next(iter))
#         i+=1
# my_count_func(start_number = int(input("Введите первое число: ")),
#               stop_number = int(input("Введите последнее число: ")))
# my_cycle_func(my_list = [1, 2], iteration = int(input("Введите итерацию (сколько чисел вывести): ")))

# Задание 7. Реализовать генератор с помощью функции с ключевым словом yield,
# создающим очередное значение. При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел,
# начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n.                                                                                                                                                                            Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

# from itertools import count
# from math import factorial
#
# def my_func():
#     for el in count(1):
#         yield factorial(el)
#
# gen = my_func()
# x = 0
# for i in gen:
#     if x < 20:
#         print(i)
#         x += 1
#     else:
#         break
